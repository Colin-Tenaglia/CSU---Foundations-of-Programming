# -*- coding: utf-8 -*-
"""PMTenagliaM6

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hw4Tp0Qor2O-HEm0o02G15Gugj2iw_0z

##**Pseudo-Code (Part 1)**

### **Class: ItemToPurchase**
- **Initialize the class with default parameters for name, price, quantity, and description:**
  - `name`: Defaults to an empty string.
  - `price`: Defaults to 0.
  - `quantity`: Defaults to 0.
  - `description`: Defaults to an empty string.

- **Define the method to represent the class as a string (`__repr__`):**
  - **Return a string that includes the item's name, price, quantity, and description formatted neatly.**
    - This provides an easy way to see a snap shot of the item's details, which useful for debugging.
"""

class ItemToPurchase:
    def __init__(self, name='', price=0, quantity=0, description=''):
        self.name = name
        self.price = price
        self.quantity = quantity
        self.description = description

    def __repr__(self):
        return f"{self.name} {self.price} {self.quantity} {self.description}"

"""###**Pseudo-Code (Part 2)**

### **Class: ShoppingCart**
- **Initialize the class with default parameters:**
  - `customer_name`: Defaults to '**none**'.
  - `current_date`: Defaults to '**January 1, 2020**'.
  - Initializes an empty list `cart_items` to store the items in the shopping cart.

- **Method: add_item(item_to_purchase)**
  - **Append** `item_to_purchase` to the `cart_items` list.

- **Method: remove_item(item_name)**
  - Initialize a flag `found` to `False`.
  - **Loop** over each item in `cart_items`:
    - If the item's name matches `item_name`:
      - **Remove** the item from `cart_items`.
      - Set `found` to `True`.
      - **Break** out of the loop.
  - If `found` is `False` after the loop, **print** "Item not found in cart. Nothing removed."

- **Method: modify_item(item_to_purchase)**
  - Initialize a flag `found` to `False`.
  - **Loop** over each item in `cart_items`:
    - If the item's name matches the name of `item_to_purchase`:
      - Optionally update the item's description if a new one is provided.
      - Optionally update the item's price if a new one is provided.
      - Optionally update the item's quantity if a new one is provided.
      - Set `found` to `True`.
      - **Break** out of the loop.
  - If `found` is `False` after the loop, **print** "Item not found in cart. Nothing modified."

- **Method: get_num_items_in_cart()**
  - **Calculate and return** the sum of the quantities of all items in `cart_items`.

- **Method: get_cost_of_cart()**
  - **Calculate** the total cost by summing up the product of price and quantity for each item in `cart_items`.
  - **Return** the total cost.

- **Method: print_total()**
  - **Calculate** the total number of items using `get_num_items_in_cart`.
  - If the cart is empty:
    - **Print** "SHOPPING CART IS EMPTY."
  - Else:
    - **Print** the customer's name and the current date.
    - **Print** the number of items in the cart.
    - Initialize `total_cost` to 0.
    - **Loop** over each item in `cart_items`:
      - Calculate the cost for each item as `item.price * item.quantity`.
      - **Print** the item's details including name, quantity, price, and total cost for that item.
      - Add the item's cost to `total_cost`.
    - **Print** the total cost of the cart.

- **Method: print_descriptions()**
  - **Print** the customer's name and the current date.
  - **Print** "Item Descriptions."
  - **Loop** over each item in `cart_items`:
    - **Print** the item's name followed by its description.
"""

class ShoppingCart:
    def __init__(self, customer_name='none', current_date='January 1, 2020'):
        self.customer_name = customer_name
        self.current_date = current_date
        self.cart_items = []

    def add_item(self, item_to_purchase):
        self.cart_items.append(item_to_purchase)

    def remove_item(self, item_name):
        found = False
        for item in self.cart_items:
            if item.name == item_name:
                self.cart_items.remove(item)
                found = True
                break
        if not found:
            print("Item not found in cart. Nothing removed.")

    def modify_item(self, item_to_purchase):
        found = False
        for item in self.cart_items:
            if item.name == item_to_purchase.name:
                if item_to_purchase.description:
                    item.description = item_to_purchase.description
                if item_to_purchase.price:
                    item.price = item_to_purchase.price
                if item_to_purchase.quantity:
                    item.quantity = item_to_purchase.quantity
                found = True
                break
        if not found:
            print("Item not found in cart. Nothing modified.")

    def get_num_items_in_cart(self):
        return sum(item.quantity for item in self.cart_items)

    def get_cost_of_cart(self):
        return sum(item.price * item.quantity for item in self.cart_items)

    def print_total(self):
        total_items = self.get_num_items_in_cart()
        if total_items == 0:
            print("SHOPPING CART IS EMPTY")
        else:
            print(f"{self.customer_name}'s Shopping Cart - {self.current_date}")
            print(f"Number of Items: {total_items}")
            total_cost = 0
            for item in self.cart_items:
                cost = item.price * item.quantity
                print(f"{item.name} {item.quantity} @ ${item.price} = ${cost}")
                total_cost += cost
            print(f"Total: ${total_cost}")

    def print_descriptions(self):
        print(f"{self.customer_name}'s Shopping Cart - {self.current_date}")
        print("Item Descriptions")
        for item in self.cart_items:
            print(f"{item.name}: {item.description}")

"""##**Pseudo-Code (Part 3)**

### **Function: print_menu(cart)**
- **Display the menu options:**
  - 'a' to Add an item to the cart.
  - 'r' to Remove an item from the cart.
  - 'c' to Change an item's quantity.
  - 'i' to Output items' descriptions.
  - 'o' to Output the shopping cart.
  - 'q' to Quit the menu.
- **Continuously process user input:**
  - Use a loop to keep asking for user choices until 'q' is selected to quit.
  - **Handle choices:**
    - If 'a':
      - Prompt for the item's name, price, quantity, and description.
      - Create a new ItemToPurchase and add it to the cart.
    - If 'r':
      - Prompt for the item's name and remove it from the cart if found.
    - If 'c':
      - Prompt for the item's name and new details (price, quantity, description).
      - Update the existing item in the cart if found.
    - If 'i':
      - Call the cart's method to print descriptions of all items.
    - If 'o':
      - Call the cart's method to print the total cost and details of the cart.
    - For invalid inputs, print an error message and prompt again.

### **Function: main()**
- **Entry point for the application:**
  - Prompt the user to enter their name and today's date.
  - Initialize a new ShoppingCart with the user's name and date.
  - Call `print_menu` with the newly created cart to start the interaction.

### **Conditional Execution Block**
- Ensure the script runs the main function if it is executed as the main program.
"""

def print_menu(cart):
    print("""MENU
a - Add item to cart
r - Remove item from cart
c - Change item quantity
i - Output items' descriptions
o - Output shopping cart
q - Quit""")
    while True:
        print("Choose an option:")
        choice = input().strip()
        if choice == 'q':
            break
        elif choice == 'a':
            name = input("Enter the item name: ")
            price = int(input("Enter the item price: "))
            quantity = int(input("Enter the item quantity: "))
            description = input("Enter the item description: ")
            cart.add_item(ItemToPurchase(name, price, quantity, description))
        elif choice == 'r':
            name = input("Enter the item name to remove: ")
            cart.remove_item(name)
        elif choice == 'c':
            name = input("Enter the item name to modify: ")
            price = int(input("Enter the new price: "))
            quantity = int(input("Enter the new quantity: "))
            description = input("Enter the new description: ")
            cart.modify_item(ItemToPurchase(name, price, quantity, description))
        elif choice == 'i':
            cart.print_descriptions()
        elif choice == 'o':
            cart.print_total()
        else:
            print("Invalid option, please try again.")

def main():
    customer_name = input("Enter customer's name: ")
    current_date = input("Enter today's date: ")
    cart = ShoppingCart(customer_name, current_date)
    print_menu(cart)

if __name__ == "__main__":
    main()